// <auto-generated />
using System;
using Amver.EfCli;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Amver.EfCli.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20190416201441_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Amver.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CountryId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Amver.Domain.Entities.Conversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("TripId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("Amver.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Amver.Domain.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Amver.Domain.Entities.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<int?>("ConversationId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("MessageDate");

                    b.Property<int?>("UserOneId");

                    b.Property<int?>("UserTwoId");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserOneId");

                    b.HasIndex("UserTwoId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Amver.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Amver.Domain.Entities.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateTo");

                    b.Property<int?>("FromCityId");

                    b.Property<int?>("FromCountryId");

                    b.Property<int?>("GenderOfCompanionId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("RoleOfCompanionId");

                    b.Property<int?>("ToCityId");

                    b.Property<int?>("ToCountryId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FromCityId");

                    b.HasIndex("FromCountryId");

                    b.HasIndex("GenderOfCompanionId");

                    b.HasIndex("RoleOfCompanionId");

                    b.HasIndex("ToCityId");

                    b.HasIndex("ToCountryId");

                    b.HasIndex("UserId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("Amver.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthDay");

                    b.Property<int?>("CityId");

                    b.Property<string>("Comment");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<string>("FaceBookId");

                    b.Property<string>("FirstName");

                    b.Property<string>("FullName");

                    b.Property<int?>("GenderId");

                    b.Property<bool>("IsBanned");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Photo");

                    b.Property<string>("Surname");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("GenderId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Amver.Domain.Entities.City", b =>
                {
                    b.HasOne("Amver.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("Amver.Domain.Entities.Conversation", b =>
                {
                    b.HasOne("Amver.Domain.Entities.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId");

                    b.HasOne("Amver.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Amver.Domain.Entities.Message", b =>
                {
                    b.HasOne("Amver.Domain.Entities.Conversation", "Conversation")
                        .WithMany()
                        .HasForeignKey("ConversationId");

                    b.HasOne("Amver.Domain.Entities.User", "UserOne")
                        .WithMany()
                        .HasForeignKey("UserOneId");

                    b.HasOne("Amver.Domain.Entities.User", "UserTwo")
                        .WithMany()
                        .HasForeignKey("UserTwoId");
                });

            modelBuilder.Entity("Amver.Domain.Entities.Trip", b =>
                {
                    b.HasOne("Amver.Domain.Entities.City", "FromCity")
                        .WithMany()
                        .HasForeignKey("FromCityId");

                    b.HasOne("Amver.Domain.Entities.Country", "FromCountry")
                        .WithMany()
                        .HasForeignKey("FromCountryId");

                    b.HasOne("Amver.Domain.Entities.Gender", "GenderOfCompanion")
                        .WithMany()
                        .HasForeignKey("GenderOfCompanionId");

                    b.HasOne("Amver.Domain.Entities.Role", "RoleOfCompanion")
                        .WithMany()
                        .HasForeignKey("RoleOfCompanionId");

                    b.HasOne("Amver.Domain.Entities.City", "ToCity")
                        .WithMany()
                        .HasForeignKey("ToCityId");

                    b.HasOne("Amver.Domain.Entities.Country", "ToCountry")
                        .WithMany()
                        .HasForeignKey("ToCountryId");

                    b.HasOne("Amver.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Amver.Domain.Entities.User", b =>
                {
                    b.HasOne("Amver.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Amver.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("Amver.Domain.Entities.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");
                });
#pragma warning restore 612, 618
        }
    }
}
