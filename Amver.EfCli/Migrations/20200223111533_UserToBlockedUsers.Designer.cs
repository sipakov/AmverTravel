// <auto-generated />
using System;
using Amver.EfCli;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Amver.EfCli.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20200223111533_UserToBlockedUsers")]
    partial class UserToBlockedUsers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Amver.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountryId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Amver.Domain.Entities.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("TripId");

                    b.Property<int>("UserId");

                    b.Property<DateTime?>("UserLastConnectDateTme");

                    b.Property<DateTime?>("UserTripHolderLastConnectDateTme");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TripId", "UserId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("Amver.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Amver.Domain.Entities.FavouriteTrip", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("TripId");

                    b.Property<bool>("IsFavourite");

                    b.HasKey("UserId", "TripId");

                    b.HasIndex("TripId");

                    b.ToTable("FavouriteTrips");
                });

            modelBuilder.Entity("Amver.Domain.Entities.Message", b =>
                {
                    b.Property<DateTime>("SaveDate");

                    b.Property<int>("Sender");

                    b.Property<Guid>("ConversationId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsFailed");

                    b.Property<string>("MessageStr")
                        .HasMaxLength(500);

                    b.Property<DateTime>("SendDate");

                    b.HasKey("SaveDate", "Sender", "ConversationId");

                    b.HasIndex("ConversationId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Amver.Domain.Entities.ObjectionableContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BanDate");

                    b.Property<string>("Comment")
                        .HasMaxLength(500);

                    b.Property<int>("ObjectionableReasonId");

                    b.Property<int>("ObjectionableUserId");

                    b.Property<int?>("TripId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ObjectionableReasonId");

                    b.HasIndex("ObjectionableUserId");

                    b.ToTable("ObjectionableContents");
                });

            modelBuilder.Entity("Amver.Domain.Entities.ObjectionableReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Reason")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("ObjectionableReasons");
                });

            modelBuilder.Entity("Amver.Domain.Entities.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment")
                        .HasMaxLength(500);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateTo");

                    b.Property<int>("FromCityId");

                    b.Property<int?>("FromCountryId");

                    b.Property<bool>("IsBanned");

                    b.Property<bool>("IsCompleted");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PreferredGender");

                    b.Property<int?>("ToCityId");

                    b.Property<int>("ToCountryId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DateFrom");

                    b.HasIndex("DateTo");

                    b.HasIndex("FromCityId");

                    b.HasIndex("FromCountryId");

                    b.HasIndex("ToCityId");

                    b.HasIndex("ToCountryId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "FromCityId", "ToCityId", "DateFrom", "DateTo", "IsDeleted")
                        .IsUnique();

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("Amver.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BirthDay");

                    b.Property<int?>("CityId");

                    b.Property<string>("Comment")
                        .HasMaxLength(500);

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<int?>("GenderId");

                    b.Property<bool>("IsBanned");

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Amver.Domain.Entities.UserAuthentication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FailedSignInAttemptsCount");

                    b.Property<bool>("ForceRelogin");

                    b.Property<string>("HashedPassword");

                    b.Property<bool>("IsEmailConfirmed");

                    b.Property<DateTime>("LastFailedSingInAttempt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserAuthentications");
                });

            modelBuilder.Entity("Amver.Domain.Entities.UserToBlockedUser", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("BlockedUserId");

                    b.Property<DateTime>("BlockingDate");

                    b.HasKey("UserId", "BlockedUserId");

                    b.HasIndex("BlockedUserId");

                    b.ToTable("UserToBlockedUsers");
                });

            modelBuilder.Entity("Amver.Domain.Entities.UserToFcmToken", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("FcmToken")
                        .HasMaxLength(500);

                    b.Property<bool>("IsInApp");

                    b.Property<DateTime>("LastSignIn");

                    b.Property<DateTime>("LastVisit");

                    b.HasKey("UserId", "FcmToken");

                    b.ToTable("UserToFcmTokens");
                });

            modelBuilder.Entity("Amver.Domain.Entities.UserToInstall", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<Guid>("InstallId");

                    b.Property<bool>("IsInApp");

                    b.Property<DateTime>("LastSignIn");

                    b.HasKey("UserId", "InstallId");

                    b.ToTable("UserToInstalls");
                });

            modelBuilder.Entity("Amver.Domain.Entities.City", b =>
                {
                    b.HasOne("Amver.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Amver.Domain.Entities.Conversation", b =>
                {
                    b.HasOne("Amver.Domain.Entities.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Amver.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Amver.Domain.Entities.FavouriteTrip", b =>
                {
                    b.HasOne("Amver.Domain.Entities.Trip", "Trip")
                        .WithMany()
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Amver.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Amver.Domain.Entities.ObjectionableContent", b =>
                {
                    b.HasOne("Amver.Domain.Entities.ObjectionableReason", "ObjectionableReason")
                        .WithMany()
                        .HasForeignKey("ObjectionableReasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Amver.Domain.Entities.User", "ObjectionableUser")
                        .WithMany()
                        .HasForeignKey("ObjectionableUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Amver.Domain.Entities.Trip", b =>
                {
                    b.HasOne("Amver.Domain.Entities.City", "FromCity")
                        .WithMany()
                        .HasForeignKey("FromCityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Amver.Domain.Entities.Country", "FromCountry")
                        .WithMany()
                        .HasForeignKey("FromCountryId");

                    b.HasOne("Amver.Domain.Entities.City", "ToCity")
                        .WithMany()
                        .HasForeignKey("ToCityId");

                    b.HasOne("Amver.Domain.Entities.Country", "ToCountry")
                        .WithMany()
                        .HasForeignKey("ToCountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Amver.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Amver.Domain.Entities.User", b =>
                {
                    b.HasOne("Amver.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Amver.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("Amver.Domain.Entities.UserAuthentication", b =>
                {
                    b.HasOne("Amver.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Amver.Domain.Entities.UserToBlockedUser", b =>
                {
                    b.HasOne("Amver.Domain.Entities.User", "BlockedUser")
                        .WithMany()
                        .HasForeignKey("BlockedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Amver.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Amver.Domain.Entities.UserToFcmToken", b =>
                {
                    b.HasOne("Amver.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Amver.Domain.Entities.UserToInstall", b =>
                {
                    b.HasOne("Amver.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
